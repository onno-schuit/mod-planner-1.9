<?php 

// IMPORTANT: in public_html/lib/grade/grade_item.php, the code on line 1598 must be changed from:
// $grade->timecreated = $datesubmitted;
// into:
// $grade->timecreated = ($datesubmitted) ? $datesubmitted : Time();

// DOCUMENTATION: http://pear.php.net/manual/en/package.fileformats.spreadsheet-excel-writer.intro-format.php

    ini_set('include_path', $CFG->libdir.'/pear' . PATH_SEPARATOR . ini_get('include_path'));
    require_once 'Spreadsheet/Excel/Writer.php';
    require_once('class.planner_workbook.php');

    
    function planner_create_workbook($studentid) {
        global $CFG, $PLANNER_ERRORS; 
      
        if (! ($student = planner_get_student($studentid)) ) {
            $PLANNER_ERRORS[] = "could not find student with id = $studentid (in planner_create_sheet)";
            return false;          
        }
        
        $coach = planner_get_coach($studentid);
        $teachers = planner_get_teachers($studentid);
        
        
        $workbook = new PlannerWorkbook();
        

        $worksheet =& $workbook->addWorksheet('Planning');
        
        planner_set_formats($workbook, $worksheet);
        
      
        
        $worksheet->write(0, 0, get_string('student_data', 'planner'), $worksheet->format_bold);
        
        $worksheet->rowOffSet++;
        $worksheet->write_string($worksheet->rowOffSet, 0, get_string('firstname'), $worksheet->format_bold );
        $worksheet->write_string($worksheet->rowOffSet, 1, get_string('lastname'), $worksheet->format_bold );
        $worksheet->write_string($worksheet->rowOffSet, 2, get_string('email'), $worksheet->format_bold );
        $worksheet->write_string($worksheet->rowOffSet, 3, get_string('subscription_date','planner'), $worksheet->format_bold );
        $worksheet->write_string($worksheet->rowOffSet, 4, get_string('lastlogin'), $worksheet->format_bold );
        $worksheet->write_string($worksheet->rowOffSet, 5, get_string('report_date','planner'), $worksheet->format_bold );
        

        $worksheet->rowOffSet++;        
        $worksheet->write_string($worksheet->rowOffSet, 0, $student->firstname );
        $worksheet->write_string($worksheet->rowOffSet, 1, $student->lastname );
        $worksheet->write_string($worksheet->rowOffSet, 2, $student->email );
        $worksheet->write_string($worksheet->rowOffSet, 3, get_string('subscription_date','planner') );
        $worksheet->write_string($worksheet->rowOffSet, 4, planner_timestamp2human($student->lastlogin) );
        $worksheet->write_string($worksheet->rowOffSet, 5, planner_timestamp2human(Time()) );

        $worksheet->rowOffSet += 3;        
        //$worksheet->setFormat("<f>",12,false);
        $worksheet->write_string($worksheet->rowOffSet, 0, get_string('company_data', 'planner'), $worksheet->format_bold );    
        $worksheet->rowOffSet++;
        $worksheet->write_string($worksheet->rowOffSet, 0, get_string('company_name','planner'), $worksheet->format_bold );
        $worksheet->write_string($worksheet->rowOffSet, 1, get_string('company_location','planner'), $worksheet->format_bold );
        $worksheet->write_string($worksheet->rowOffSet, 2, get_string('company_address','planner'), $worksheet->format_bold );
        $worksheet->write_string($worksheet->rowOffSet, 3, get_string('company_zipcode','planner'), $worksheet->format_bold );
        $worksheet->write_string($worksheet->rowOffSet, 4, get_string('company_city','planner'), $worksheet->format_bold );
        $worksheet->write_string($worksheet->rowOffSet, 5, get_string('company_phone','planner'), $worksheet->format_bold );
        $worksheet->rowOffSet++;
        //$worksheet->setFormat('<l><vo>');
        $worksheet->write_string($worksheet->rowOffSet, 0, get_string('company_name','planner') );
        $worksheet->write_string($worksheet->rowOffSet, 1, get_string('company_location','planner') );
        $worksheet->write_string($worksheet->rowOffSet, 2, get_string('company_address','planner') );
        $worksheet->write_string($worksheet->rowOffSet, 3, get_string('company_zipcode','planner') );
        $worksheet->write_string($worksheet->rowOffSet, 4, get_string('company_city','planner') );
        $worksheet->write_string($worksheet->rowOffSet, 5, get_string('company_phone','planner') );
 
        $worksheet->rowOffSet += 2;
        //$worksheet->setFormat("<f>",12,false);
        $worksheet->write_string($worksheet->rowOffSet, 0, get_string('coach','planner'), $worksheet->format_bold );
        $worksheet->write_string($worksheet->rowOffSet, 3, get_string('teacher','planner'), $worksheet->format_bold );
        
        $worksheet->rowOffSet++;
        // $worksheet->setFormat("<f>",12);
        $worksheet->write_string($worksheet->rowOffSet, 0, get_string('firstname'), $worksheet->format_bold );
        $worksheet->write_string($worksheet->rowOffSet, 1, get_string('lastname'), $worksheet->format_bold );
        $worksheet->write_string($worksheet->rowOffSet, 2, get_string('email'), $worksheet->format_bold );
        $worksheet->write_string($worksheet->rowOffSet, 3, get_string('firstname'), $worksheet->format_bold );
        $worksheet->write_string($worksheet->rowOffSet, 4, get_string('lastname'), $worksheet->format_bold );
        $worksheet->write_string($worksheet->rowOffSet, 5, get_string('email'), $worksheet->format_bold );
 
        $worksheet->rowOffSet++;
        //$worksheet->setFormat('<l><vo>');
        if ($coach) {
            $worksheet->write_string($worksheet->rowOffSet, 0, $coach->firstname );
            $worksheet->write_string($worksheet->rowOffSet, 1, $coach->lastname );
            $worksheet->write_string($worksheet->rowOffSet, 2, $coach->email );
        } 
        
        foreach($teachers as $teacher) {
            $worksheet->write_string($worksheet->rowOffSet, 3, $teacher->firstname );
            $worksheet->write_string($worksheet->rowOffSet, 4, $teacher->lastname );
            $worksheet->write_string($worksheet->rowOffSet, 5, $teacher->email );
            $worksheet->rowOffSet++;
        }
        
        planner_export_sections($student, $worksheet);
        
        
        return $workbook;
    } // function planner_create_workbook    
    
    
    
    function planner_set_formats(&$workbook, &$worksheet) {
        $worksheet->format_bold =& $workbook->addFormat();
        $worksheet->format_bold->setBold();      
        
        $colors = array('red','green','orange','yellow');
        foreach($colors as $color) {
            $worksheet->{"format_{$color}"} =& $workbook->addFormat();
            $worksheet->{"format_{$color}"}->setFgColor($color);
        }
    }// function planner_set_formats    
    
    
    function planner_export_sections($student, &$worksheet) {
        global $course;
        if (! ($course_sections = planner_get_course_sections($course->id)) ) {
            error(get_string('no_titled_sections','planner'));
            return false;
        }
        //exit(print_r($course_sections));
        foreach($course_sections as $course_section) {
            $worksheet->rowOffSet += 2;
            $worksheet->write_string($worksheet->rowOffSet, 0, $course_section->summary, $worksheet->format_bold );
            $worksheet->rowOffSet++;
            
            $worksheet->write_string($worksheet->rowOffSet, 0, get_string('activity'), $worksheet->format_bold );
            $worksheet->write_string($worksheet->rowOffSet, 1, get_string('plan_date','planner'), $worksheet->format_bold );
            $worksheet->write_string($worksheet->rowOffSet, 2, get_string('status'), $worksheet->format_bold );
            $worksheet->write_string($worksheet->rowOffSet, 3, get_string('date_delivered','planner'), $worksheet->format_bold );
            $worksheet->write_string($worksheet->rowOffSet, 4, get_string('date_marked','planner'), $worksheet->format_bold );
            $worksheet->write_string($worksheet->rowOffSet, 5, get_string('mark','planner'), $worksheet->format_bold );
            $worksheet->rowOffSet++;

            planner_export_section(
                $student,
                $worksheet,
                $course_section,
                planner_get_section($course_section->id) );
        }
    } // function planner_export_sections
    
    
    function planner_export_section($student, &$worksheet, $course_section, $section) {
        global $course, $EXCLUDED_MODS;
        $modinfo = get_fast_modinfo($course);
        $userid =  $student->id;
        $dates = planner_get_dates($userid, $course_section->id);
        $sectionmods = explode(",", $section->sequence);
        //$worksheet->setFormat('<l><vo>');
        foreach ($sectionmods as $modnumber) {
            // Please note: $modnumber = course_modules.id
            if (( in_array($modinfo->cms[$modnumber]->modname, $EXCLUDED_MODS) ) || ($modinfo->cms[$modnumber]->modname == '') ) {
                continue;
            }            
            $instancename = format_string($modinfo->cms[$modnumber]->name, true,  $course->id);
            $worksheet->write_string($worksheet->rowOffSet, 0, $instancename );
            $obj_date = false;
            if ($obj_date = planner_end_date($dates, $modnumber)) {
                $end_date = planner_timestamp2human($obj_date->end_date);
                $worksheet->write_string($worksheet->rowOffSet, 1, $end_date );  
            }
            
            $grade = false;
            if ($grade = planner_get_grade($userid, $modinfo->cms[$modnumber]->modname, $modinfo->cms[$modnumber]->instance)) {
                $worksheet->write_string($worksheet->rowOffSet, 3, planner_timestamp2human($grade->timecreated));
                $worksheet->write_string($worksheet->rowOffSet, 4, planner_timestamp2human($grade->timemodified));
                $worksheet->write_string($worksheet->rowOffSet, 5, round($grade->rawgrade) . "/" . round($grade->rawgrademax));
            }
            if ($obj_date) { 
                $color = planner_get_status($obj_date->end_date, $grade);
                $worksheet->write_string($worksheet->rowOffSet, 2, "", $worksheet->{"format_{$color}"});
            }
            
            $worksheet->rowOffSet++;
            
            // <td>\$modnumber  = $modnumber -- \$instancename = $instancename -- \$modinfo->cms[$modnumber]->modname = {$modinfo->cms[$modnumber]->modname}<br/></td>
            //<td>" . planner_date_field($dates, $modnumber, $course_section_id) . "</td>
        }
    } // function planner_export_section
    
    
    
    // Please note that we are using the end date of the planning, instead of 
    // the due date of e.g. assignment activitiy. This is because there is no single table
    // to retrieve the actual due date from.
    function planner_get_status($end_date, $grade) {
        if ( !$grade ) {
            // student has not yet handed in or completed activity
            return (Time() < $end_date) ? 'yellow' : 'red';
        }
        
        if (!$grade->rawgrade) {
            return (Time() < $end_date) ? 'orange' : 'red';  
        }
        return 'green';
    } // function planner_get_status
    
    
    function planner_get_student($studentid) {
        global $PLANNER_ERRORS, $context;
        if (! has_capability('mod/planner:readforeignplanning', $context) ) {
            $PLANNER_ERRORS[] = "Operation not allowed (planner_get_student)";
            return false;
        }
        return get_record('user', 'id', $studentid);
    } // function planner_get_student
    
    
    function planner_get_grade($userid, $modname, $course_module_instance_id) {
        // course_modules.instance == grade_items.iteminstance
        global $CFG, $course;
      
        $grades = get_records_sql("SELECT DISTINCT grades.* 
                                   FROM {$CFG->prefix}grade_grades grades
                                   INNER JOIN {$CFG->prefix}grade_items i ON grades.itemid = i.id
                                   WHERE i.iteminstance = $course_module_instance_id
                                   AND i.courseid = $course->id
                                   AND i.itemmodule LIKE '{$modname}' 
                                   AND grades.userid = $userid");
        return ($grades) ? $grades[key($grades)] : false;
        
    } // function planner_get_grade
    
    
    
    function planner_test() {
        $workbook = new Spreadsheet_Excel_Writer();
        
        $worksheet->format_bold =& $workbook->addFormat();
        $worksheet->format_bold->setBold();
        
        $format_title =& $workbook->addFormat();
        $format_title->setBold();
        $format_title->setColor('white');
        $format_title->setPattern(1);
        $format_title->setFgColor('blue');
        // let's merge
        //$format_title->setAlign('merge');
        
        $worksheet =& $workbook->addWorksheet('Planning');
        $worksheet->write(0, 0, "Quarterly Profits for Dotcom.Com", $format_title);
        // Couple of empty cells to make it look better
        $worksheet->write(0, 1, "", $format_title);
        $worksheet->write(0, 2, "", $format_title);
        $worksheet->write(1, 0, "Quarter", $worksheet->format_bold);
        $worksheet->write(1, 1, "Profit", $worksheet->format_bold);
        $worksheet->write(2, 0, "Q1");
        $worksheet->write(2, 1, 0);
        $worksheet->write(3, 0, "Q2");
        $worksheet->write(3, 1, 0);   
        
        $worksheet->write(4, 0, "TEST", $worksheet->format_bold);
        $worksheet->write(5, 0, "And NOT bold");
        
          
        return $workbook;
    }
    

    
    
    
    
?>
